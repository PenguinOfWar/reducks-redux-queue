{"version":3,"sources":["lib/helpers.js","lib/constants.js","lib/reducer.js","lib/actions.js","lib/runner.js","reducers/rootReducer.js","lib/epics.js","stores/store.js","dispatch/bootstrap.js","components/Examples/snippets.js","components/Examples/Examples.js","containers/App/App.js","serviceWorker.js","index.js","assets/images/logo.png"],"names":["initialState","fnMap","ENQUEUE","DEQUEUE","COMMENCED","CEASED","guid","r","Math","floor","random","toString","substring","createReducer","jobs","running","state","payload","length","job","id","shift","type","handle","start","dispatch","a","stop","runner","store","getState","reducks","isRunning","name","call","console","warn","next","remove","rootEpic","combineEpics","action$","config","onStart","onFinish","pipe","filter","action","combineReducers","routing","routerReducer","toastr","toastrReducer","epicMiddleware","createEpicMiddleware","dispatched","add","simple","fifo","advanced","Simple","props","className","onClick","log","Promise","resolve","setTimeout","success","text","language","showLineNumbers","theme","wrapLines","codeBlock","map","item","displayName","Advanced","connect","src","logo","alt","href","target","rel","role","Boolean","window","location","hostname","match","history","createHistory","progress","Progress","height","color","createStore","rootReducer","compose","applyMiddleware","thunk","routerMiddleware","navigator","userAgent","includes","__REDUX_DEVTOOLS_EXTENSION__","run","state$","end","configureStore","AppLoader","path","component","Fragment","timeOut","newestOnTop","preventDuplicates","position","transitionIn","transitionOut","progressBar","closeOnToastrClick","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.bcdcdda8.chunk.js","sourcesContent":["export const createReducer = (initialState, fnMap) => {\n  return (state = initialState, { type, payload }) => {\n    const handle = fnMap[type];\n    return handle ? handle(state, payload) : state;\n  };\n};\n\nexport const guid = () => {\n  const r = () =>\n    Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  return (\n    r() + r() + r() + '-' + r() + '_' + r() + '-' + r() + '_' + r() + r() + r()\n  );\n};\n","export const ENQUEUE = '@REDUCKS/ENQUEUE';\nexport const DEQUEUE = '@REDUCKS/DEQUEUE';\nexport const COMMENCED = '@REDUCKS/COMMENCED';\nexport const CEASED = '@REDUCKS/CEASED';\n","import { ENQUEUE, DEQUEUE, COMMENCED, CEASED } from './constants';\nimport { createReducer } from './helpers';\n\nconst initialState = {\n  jobs: [],\n  running: false\n};\n\nexport default createReducer(initialState, {\n  [ENQUEUE]: (state = {}, payload = {}) => {\n    const { jobs = [] } = state;\n\n    return {\n      ...state,\n      jobs: [...jobs, payload]\n    };\n  },\n  [DEQUEUE]: (state = {}, payload = {}) => {\n    const { jobs = [] } = state;\n\n    if (jobs.length === 0) {\n      return state;\n    }\n\n    const job = jobs[0] || {};\n    const { id } = job;\n\n    if (id !== payload.id) {\n      return state;\n    }\n\n    jobs.shift();\n\n    return {\n      ...state,\n      jobs\n    };\n  },\n  [COMMENCED]: (state = {}) => {\n    return {\n      ...state,\n      running: true\n    };\n  },\n  [CEASED]: (state = {}) => {\n    return {\n      ...state,\n      running: false\n    };\n  }\n});\n","import { ENQUEUE, DEQUEUE, COMMENCED, CEASED } from './constants';\nimport { guid } from './helpers';\n\nexport const add = (name = '', job = () => {}) => async dispatch => {\n  dispatch({\n    type: ENQUEUE,\n    payload: {\n      id: guid(),\n      name,\n      call: job\n    }\n  });\n};\n\nexport const remove = (job = {}) => async dispatch => {\n  dispatch({\n    type: DEQUEUE,\n    payload: job\n  });\n};\n\nexport const start = () => async dispatch => {\n  dispatch({\n    type: COMMENCED,\n    payload: true\n  });\n};\n\nexport const stop = () => async dispatch => {\n  dispatch({\n    type: CEASED,\n    payload: false\n  });\n};\n","import { remove, start, stop } from './actions';\n\nlet running = 0;\n\nexport const runner = async (store = {}) => {\n  const { dispatch } = store;\n\n  if (running) {\n    return;\n  }\n\n  const state = store.getState();\n  const { reducks = {} } = state;\n  const { jobs = [], running: isRunning } = reducks;\n\n  if (jobs.length > 0) {\n    !isRunning && dispatch(start());\n\n    running = running + 1;\n\n    const job = jobs[0] || {};\n    const { name, call = () => {} } = job;\n\n    try {\n      await call({ store, job });\n    } catch (err) {\n      console.warn(`Task ${name} has failed`);\n      console.warn(err);\n    }\n\n    next(store, job);\n\n    return;\n  }\n\n  dispatch(stop());\n\n  return;\n};\n\nexport const next = (store, job) => {\n  const { dispatch } = store;\n\n  dispatch(remove(job));\n\n  running = running - 1 || 0;\n\n  runner(store);\n};\n","import { combineReducers } from 'redux';\nimport { routerReducer } from 'react-router-redux';\nimport { reducer as toastrReducer } from 'react-redux-toastr';\nimport { reducks, reducksEpic } from '../lib';\nimport { combineEpics } from 'redux-observable';\n\nexport const rootEpic = combineEpics(reducksEpic);\n\nexport default combineReducers({\n  routing: routerReducer,\n  toastr: toastrReducer,\n  reducks\n});\n","import { filter } from 'rxjs/operators';\n\nimport { runner } from './runner';\nimport { ENQUEUE, DEQUEUE, COMMENCED, CEASED } from './constants';\n\nexport const reducksEpic = (\n  action$ = {},\n  state$ = {},\n  { store, config = {} }\n) => {\n  const { onStart, onFinish } = config;\n\n  return action$.pipe(\n    filter((action = {}) => {\n      const { type } = action;\n\n      if (type === ENQUEUE || type === DEQUEUE) {\n        runner(store, type);\n      }\n\n      if (type === COMMENCED) {\n        typeof onStart === 'function' && onStart();\n      }\n\n      if (type === CEASED) {\n        typeof onFinish === 'function' && onFinish();\n      }\n    })\n  );\n};\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { routerMiddleware } from 'react-router-redux';\nimport { createEpicMiddleware } from 'redux-observable';\n\nimport rootReducer, { rootEpic } from '../reducers/rootReducer';\n\nconst epicMiddleware = createEpicMiddleware();\n\nexport default function configureStore({ initialState = {}, history }) {\n  const store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n      applyMiddleware(thunk, routerMiddleware(history), epicMiddleware),\n      window.navigator.userAgent.includes('Chrome') &&\n        window.__REDUX_DEVTOOLS_EXTENSION__\n        ? window.__REDUX_DEVTOOLS_EXTENSION__()\n        : compose\n    )\n  );\n\n  epicMiddleware.run((action$, state$) => {\n    return rootEpic(action$, state$, {\n      store,\n      config: {\n        onStart: () => {\n          window.progress.start();\n        },\n        onFinish: () => {\n          window.progress.end();\n        }\n      }\n    });\n  });\n\n  return store;\n}\n","import { add } from '../lib';\n\nconst dispatched = dispatch => {\n  return {\n    add: (name, job) => dispatch(add(name, job))\n  };\n};\n\nexport const mapStateToProps = (state = {}) => {\n  return state;\n};\n\nexport const mapDispatchToProps = dispatch => dispatched(dispatch);\n","export const simple = `import React from 'react';\nimport { toastr } from 'react-redux-toastr';\n                \nconst Simple = (props = {}) => {\n  const { add } = props;\n\n  return <button \n          onClick={() =>\n            add('addToQueue', async ({ job }) => {\n              const { id, name } = job;\n\n              console.log('About to wait');\n              console.log(id, name);\n              await new Promise(resolve =>\n                setTimeout(() => {\n                  console.log('Waited 5000ms');\n                  toastr.success('Success', 'Well done for waiting.');\n                  resolve();\n                }, 5000)\n              );\n            })}\n          type=\"button\">\n            Enqueue\n          </button>\n};\n\nexport default Simple;`;\n\nexport const fifo = `import React from 'react';\nimport { toastr } from 'react-redux-toastr';\n                \nconst Fifo = (props = {}) => {\n  const { add } = props;\n\n  return <button \n          onClick={() => {\n            const array = ['First', 'Second', 'Third', 'Fourth', 'Fifth'];\n\n            array.map(item => {\n              return add('pushJob', async () => {\n                await new Promise(resolve =>\n                  setTimeout(() => {\n                    toastr.success(\\`Job The \\${item}\\`, 'Hi there!');\n                    resolve();\n                  }, 1000)\n                );\n              });\n            });\n          }}\n          type=\"button\">\n            Enqueue\n          </button>\n};\n\nexport default Fifo;`;\n\nexport const advanced = `import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createEpicMiddleware } from 'redux-observable';\n\nimport rootReducer, { rootEpic } from '../reducers/rootReducer';\n\nconst epicMiddleware = createEpicMiddleware();\n\nexport default function configureStore({ initialState = {} }) {\n  const store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n      applyMiddleware(thunk, epicMiddleware),\n      window.navigator.userAgent.includes('Chrome') &&\n        window.__REDUX_DEVTOOLS_EXTENSION__\n        ? window.__REDUX_DEVTOOLS_EXTENSION__()\n        : compose\n    )\n  );\n\n  epicMiddleware.run((action$, state$) => {\n    return rootEpic(action$, state$, {\n      store,\n      config: {\n        onStart: () => {\n          progress.start();\n        },\n        onFinish: () => {\n          progress.end();\n        }\n      }\n    });\n  });\n\n  return store;\n}`;\n","import React from 'react';\nimport { CopyBlock, railscast as theme } from 'react-code-blocks';\nimport PropTypes from 'prop-types';\nimport { toastr } from 'react-redux-toastr';\n\nimport { simple, fifo, advanced } from './snippets';\n\nconst Simple = (props = {}) => {\n  const { add } = props;\n\n  return (\n    <div className=\"container pb-4\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className=\"card bg-secondary text-white\">\n            <div className=\"card-body\">\n              <h2 className=\"card-title display-4\">Simple</h2>\n              <p className=\"card-text\">\n                Clicking the button below will add a single notfication job to\n                the queue.\n              </p>\n              <p className=\"card-text\">\n                The behaviour of the queue system is demonstrated by the 5\n                second timeout within the Promise. In practice, this could be\n                web request or some other long-running task.\n              </p>\n              <button\n                className=\"btn btn-dark\"\n                onClick={() =>\n                  add('addToQueue', async ({ job }) => {\n                    const { id, name } = job;\n\n                    console.log('About to wait');\n                    console.log(id, name);\n                    await new Promise(resolve =>\n                      setTimeout(() => {\n                        console.log('Waited 5000ms');\n                        toastr.success('Success', 'Well done for waiting.');\n                        resolve();\n                      }, 5000)\n                    );\n                  })\n                }\n              >\n                Enqueue\n              </button>\n              <hr className=\"my-4\" />\n              <CopyBlock\n                text={simple}\n                language=\"jsx\"\n                showLineNumbers=\"true\"\n                theme={theme}\n                wrapLines\n                codeBlock\n              />\n            </div>\n            <hr className=\"my-4\" />\n            <div className=\"card-body\">\n              <h2 className=\"card-title display-4\">\n                FIFO FIFO, {`It's`} Off To Work We Go\n              </h2>\n              <p className=\"card-text\">\n                While you can use Reducks as a synchronous queue dispatcher,\n                {` it's`} true purpose is to provide a strict First In, First\n                Out (FIFO) so the execution order is consistentl and\n                predictable.\n              </p>\n              <p className=\"card-text\">\n                Click below to add 5 promisified timeout jobs and watch them\n                execute in order.\n              </p>\n              <button\n                className=\"btn btn-dark\"\n                onClick={() => {\n                  const array = ['First', 'Second', 'Third', 'Fourth', 'Fifth'];\n\n                  array.map(item => {\n                    return add('pushJob', async () => {\n                      await new Promise(resolve =>\n                        setTimeout(() => {\n                          toastr.success(`Job The ${item}`, 'Hi there!');\n                          resolve();\n                        }, 1000)\n                      );\n                    });\n                  });\n                }}\n              >\n                Enqueue\n              </button>\n              <hr className=\"my-4\" />\n              <CopyBlock\n                text={fifo}\n                language=\"jsx\"\n                showLineNumbers=\"true\"\n                theme={theme}\n                wrapLines\n                codeBlock\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nSimple.displayName = 'Simple';\nSimple.propTypes = {\n  add: PropTypes.func.isRequired\n};\n\nconst Advanced = (props = {}) => {\n  const { add } = props;\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div className=\"card bg-secondary text-white\">\n            <div className=\"card-body\">\n              <h2 className=\"card-title display-4\">Advanced</h2>\n              <p className=\"card-text\">\n                Reducks can fire optional methods when a queue starts running\n                and again when it finishes. This is useful for things like\n                progress bars or notifications.\n              </p>\n              <button\n                className=\"btn btn-dark\"\n                onClick={() => {\n                  const array = ['First', 'Second', 'Third', 'Fourth', 'Fifth'];\n\n                  array.map(item => {\n                    return add('pushJob', async () => {\n                      await new Promise(resolve =>\n                        setTimeout(() => {\n                          toastr.success(`Job The ${item}`, 'Hi there!');\n                          resolve();\n                        }, 1000)\n                      );\n                    });\n                  });\n                }}\n              >\n                Enqueue\n              </button>\n              <hr className=\"my-4\" />\n              <CopyBlock\n                text={advanced}\n                language=\"jsx\"\n                showLineNumbers=\"true\"\n                theme={theme}\n                wrapLines\n                codeBlock\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nAdvanced.displayName = 'Advanced';\nAdvanced.propTypes = {\n  add: PropTypes.func.isRequired\n};\n\nexport { Simple, Advanced };\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { mapStateToProps, mapDispatchToProps } from '../../dispatch/bootstrap';\n\nimport { Simple, Advanced } from '../../components/Examples/Examples';\n\nimport logo from '../../assets/images/logo.png';\nimport './App.scss';\n\nconst App = (props = {}) => {\n  return (\n    <div className=\"app container-fluid\">\n      <div className=\"row\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"jumbotron bg-secondary text-white text-center\">\n                <div className=\"row\">\n                  <div className=\"col-lg-6 offset-lg-3\">\n                    <img src={logo} className=\"img-fluid logo\" alt=\"Reducks\" />\n                  </div>\n                </div>\n                <h1 className=\"display-5\">\n                  <span className=\"sr-only\">Reducks </span>(Redux Queue)\n                </h1>\n                <p className=\"lead\">\n                  A redux-observable driven FIFO (first in - first out) queueing\n                  system for redux and redux-thunk.\n                </p>\n                <p className=\"lead\">\n                  Reducks is also fully compatible with react-redux. Please see\n                  the source code of this page for examples.\n                </p>\n                <hr className=\"my-4\" />\n                <p>\n                  On this page you will find interactive examples. Please\n                  consult the documentation for further details and a tutorial.\n                </p>\n                <ul className=\"list-inline\">\n                  <li className=\"list-inline-item\">\n                    <a\n                      className=\"btn btn-dark btn-lg\"\n                      href=\"https://github.com/PenguinOfWar/reducks-redux-queue\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      role=\"button\"\n                    >\n                      Documentation\n                    </a>\n                  </li>\n                  <li className=\"list-inline-item\">\n                    <a\n                      className=\"btn btn-dark btn-lg\"\n                      href=\"https://github.com/PenguinOfWar/reducks-redux-queue/issues\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      role=\"button\"\n                    >\n                      Support\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"container pb-4\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <div className=\"card bg-secondary text-white\">\n                <div className=\"card-body\">\n                  <h2 className=\"card-title display-4\">Demos &amp; Examples</h2>\n                  <p className=\"card-text\">\n                    The following examples are generic usage examples that\n                    assume you have either followed the tutorial to get started,\n                    or know enough that this will just make sense.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <Simple {...props} />\n      </div>\n      <div className=\"row\">\n        <Advanced {...props} />\n      </div>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Router, Route } from 'react-router-dom';\nimport { createBrowserHistory as createHistory } from 'history';\nimport Progress from 'rsup-progress';\nimport ReduxToastr from 'react-redux-toastr';\n\nimport configureStore from './stores/store';\n\nimport App from './containers/App/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'react-redux-toastr/src/styles/index.scss';\nimport './sass/index.scss';\n\nconst history = createHistory();\n\nconst initialState = {};\n\nwindow.progress = new Progress({\n  height: 25,\n  color: 'red'\n});\n\nconst store = configureStore({ initialState, history });\n\nconst AppLoader = (\n  <Provider store={store}>\n    <Router history={history}>\n      <Route\n        path=\"*\"\n        component={props => (\n          <React.Fragment>\n            <App {...props} />\n            <ReduxToastr\n              timeOut={4000}\n              newestOnTop={false}\n              preventDuplicates\n              position=\"bottom-right\"\n              getState={() => {\n                return store.getState().toastr;\n              }} // This is the default\n              transitionIn=\"fadeIn\"\n              transitionOut=\"fadeOut\"\n              progressBar\n              closeOnToastrClick\n            />\n          </React.Fragment>\n        )}\n      />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(AppLoader, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.8516bce7.png\";"],"sourceRoot":""}